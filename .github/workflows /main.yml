name: CICD

on:
  pull_request:
    branches: [master]
    types: [opened, synchronize, closed, review_requested, review_submitted]
  push:
    branches: ['**']  # Allow push from any branch

jobs:
  check-approval:
    runs-on: ubuntu-latest
    outputs:
      approved: ${{ steps.approval.outputs.approved }}
    steps:
      - name: Check if PR is Approved
        id: approval
        run: |
          APPROVALS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews" \
          | jq '[.[] | select(.state=="APPROVED")] | length')

          if [[ "$APPROVALS" -gt 0 ]]; then
            echo "approved=true" >> $GITHUB_ENV
            echo "::set-output name=approved::true"
          else
            echo "approved=false" >> $GITHUB_ENV
            echo "::set-output name=approved::false"
          fi

  build:
    runs-on: ubuntu-latest
    needs: check-approval
    if: needs.check-approval.outputs.approved == 'true' && github.event_name == 'push'
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Install Dependencies
        run: npm install  # Fixed typo

      - name: Test Project
        run: npm test || echo "Tests not defined, continuing..."

  notify:
    runs-on: ubuntu-latest
    needs: build
    if: always()  # Runs regardless of build success or failure
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get Commit Info
        run: |
          echo "COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "REPO_URL=https://github.com/${GITHUB_REPOSITORY}/actions" >> $GITHUB_ENV
          echo "SITE_URL=test-gh-actions.dev5.rt.gw" >> $GITHUB_ENV
          echo "SSH_HOST=www-data@dev5.rt.gw" >> $GITHUB_ENV

      - name: Send Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: "rtBot"
          SLACK_COLOR: "${{ needs.build.result == 'success' && 'good' || 'danger' }}"
          SLACK_MESSAGE: |
            *${{ github.actor }}* pushed new code.
            *Site:* <${{ env.SITE_URL }}|test-gh-actions.dev5.rt.gw>
            *Ref:* `${{ github.ref }}`
            *SSH Host:* `${{ env.SSH_HOST }}`
            *Event:* `${{ github.event_name }}`
            *Repo Action URL:* <${{ env.REPO_URL }}|GitHub Actions>
            *Message:* `${{ env.COMMIT_MESSAGE }}`
            *Build Status:* `${{ needs.build.result }}`
            *PR Status:* ${{ needs.check-approval.outputs.approved == 'true' && '✅ Approved' || '❌ Not Approved' }}
          SLACK_FOOTER: "Powered By rtCamp's GitHub Actions Library"
